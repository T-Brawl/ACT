#include <stdio.h>
#include <stdlib.h>
#include <time.h>

enum dim_e {width,height};

typedef enum dim_e dimension;

#define max(a,b) \
   ({ __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     _a > _b ? _a : _b; })


#define min(a,b) \
   ({ __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     _a < _b ? _a : _b; }) 


int launch_rec_one(unsigned int arr[4],dimension d, int cpt){
  if(cpt<=arr[d+2]){
    if(d==0){
      return position_naive(arr[0]-cpt, arr[1], arr[2]-cpt,arr[3]);
    }else{
      return position_naive(arr[0], arr[1]-cpt, arr[2],arr[3]-cpt);
    }
  }else{
    
    if(d==0){
      return position_naive(cpt, arr[1],arr[2],arr[3]);
    }else{
      return position_naive(arr[0], cpt, arr[2],arr[3]);
    }
  }
}


int cut_in(unsigned int arr[],dimension d){
  int cpt,tmp,res;
  /*res must be never equal to 0, except when m and n are equal to 1*/
  res=1;
  /*we search the heighter int<0 or if not exist, the heighter int
   after we add+1 at the aboslute value and change the sign
   we start to 1 to avoid test the same case in infinity*/
  for(cpt=1; cpt<arr[d];cpt++){
    tmp=launch_rec_one(arr,d,cpt);
    /*we don't have change sign*/
    if(res>0 && tmp>0) {
      res=max(res,tmp+1);
    } else if (res>0 && tmp<=0){
      res=tmp-1;
    } else if (res<0 && tmp<=0){
      res=max(res, tmp-1);
    }/*else {
      res=res;
    }*/
  }
  return - res;
}

int cut_in_height(unsigned int arr[]){
  return cut_in(arr, height);
}

int cut_in_width(unsigned int arr[]){
  return cut_in(arr, width);
}

int position_naive(unsigned int m, unsigned int n, unsigned int i, unsigned int j){
  int width, height;
  unsigned int arr[4];
  if(m==1&&n==1){
    return 0;
  }
  arr[0]=m;
  arr[1]=n;
  arr[2]=i;
  arr[3]=j;
  if(n==1){
    return cut_in_width(arr);
  }
  if(m==1){
    return cut_in_height(arr);
  }
  width=cut_in_width(arr);
  height=cut_in_height(arr);
   
  if(width<0 && height<0){
    return max( width, height);
  }if(width<0){
    return height;
  }else if(height<0){
    return width;
  }else{
    return min( width, height);
  }
}

/*dyna_one*/

int position_dynamique(unsigned int m, unsigned int n, unsigned int i, unsigned int j){
  int k,l,o;
  int arr[m][n][i][j];
}


int main (int argc, char *argv[]){

    int res;
    float temps;
    clock_t t1, t2;

    t1 = clock();
    if (argv[5]=="naive"){
      res = position_naive(atoi(argv[1]), atoi(argv[2]), atoi(argv[3])-1, atoi(argv[4])-1);
    }else if(argv[5]=="dyna1"){
      res = position_dyna_one(atoi(argv[1]), atoi(argv[2]), atoi(argv[3])-1, atoi(argv[4])-1);
    }else{
      res = position_dyna_one(atoi(argv[1]), atoi(argv[2]), atoi(argv[3])-1, atoi(argv[4])-1);
    }
    printf("RÃ©sultat = %d\n",res);
    
    t2 = clock();
    temps = (float)(t2-t1)/CLOCKS_PER_SEC;
    printf("temps = %f\n", temps);

    return 0;
}

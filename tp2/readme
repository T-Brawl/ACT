Q2
Quelles sont les conditions pour qu’une polyligne soit une ligne de toits ?
pour (x1,y1),(x2,y2),(x3,y3),(x4,y4)
x1<=x2
soit x1=x2, soit y1=y2

Q4
Pseudo-code du parcours

int x,y=0;
int dernier_y 
list <tuple (int,int)> polyline
tant que x n'est pas maximum, et y est différent de zéro alors
	  si le point(x,y+1) vaut 1 alors
	        y=y+1
	  sinon si le point(x+1,y) vaut 1 alors
         	on ajoute à polyline le couple (x,y)
		tant que le point(x+1,y) vaut 1 et (x,y+1)==0 alors
	            x=x+1
		fin tant que
	  sinon si le point(x,y-1) vaut 1 alors
	        y=y-1
	  sinon
	        erreur
fin tant que

fun pseudo-code


si on a npixel sur n pixel,
Dans le pire des cas, le tant que prend n opérations pour augmenter y
le deuxième tant que prend n opérations pour augmenter x

algo en O(n²)

Q5)
pseudo-code

2 list en param l1 et l2

list <tuple (int,int)> polyline
it = iterateur sur l2
pour chaque point p1 de l1
     tant que p1(x)<it(x)
          derniery= it(y)
          it suivant
     fin tant que
     si p1(x)==it(x) et p1(y)>it(y) et p1suivant(y) > y
     si p1(y)>derniery
     	ajouter p1 dans la liste juste avant it(x)
     fin si
fin du pour chaque
//rajouter la boucle pour supprimer les mauvais points


2 list en param l1 et l2

resultat = nouvelle liste polyline
it1 = iterateur sur l1
it2 = iterateur sur l2

//derniers points ajouter
dernier1= p1
dernier2 =p2
tant que it1!=fin
     si it2 == fin
     	ajouter a resultat it1(point)
	it1 next
     sinon
	si it1(point(x))>it2(point(x))
	   si dernier1(y)<=it2(point(y))
              si it1(point(y))<=it2(point(y))
	      	 on ajoute à resultat it2(point)
	      sinon
		//cas de rajout d'intersection
	       dernier2= nouveau point(it2(point(x)), dernier1(y))
	       on ajoute a resultat dernier2
	      fin si
	   fin si
	   it2 next
     	sinon
	   si it1(point(y))>= dernier2(y)
	      si it1(point(y))>=it2(point(y))
	      	 on ajoute à resultat it1(point)
	      	 dernier1=it1(point)
	      sinon
		//cas de rajout d'intersection
		dernier1= nouveau point(it1(point(x)), dernier(y))
		on ajoute a resultat dernier1
	      fin si
	   fin si
	   it1 next
	fin si
    fin si
fin tant que
tant que it2!=fin
     on ajoute à resultat it2(point)
     it2 next
fin tant que
retourne resultat

si n= total de point
le parcour avec les itérateur est de 1 pour chaque point.
donc l'algorithme est en n+comparaison en O(1) +insertion en O(1) = O(n)

Q6